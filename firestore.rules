/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/meals/{mealId}: Stores meal logs. Only the authenticated user can read/write their own meals.
 * - /users/{userId}/activityLogs/{activityLogId}: Stores activity logs. Only the authenticated user can read/write their own activity logs.
 *
 * Key Security Decisions:
 * - No user listing is allowed.
 * - All data is private and user-owned.
 * - Data shapes are not strictly enforced beyond authorization-critical fields.
 *
 * Authorization Independence via Path-Based Ownership:
 * To ensure Authorization Independence and prevent slow, costly, or even impossible `get()` calls in security rules,
 * all user-owned data is nested under the `/users/{userId}` path. This allows us to use the `isOwner(userId)` helper function
 * for simple, performant authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) Authenticated user can get, update, or delete their own profile.
     * @deny (create) User cannot create a profile with an ID that does not match their own.
     * @deny (get, update, delete) User cannot get, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      // Function to check if the requested user id is same as authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Function to check if the user is the owner and document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to meal log documents within a user's profile.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) Authenticated user can create a meal log under their profile.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own meal logs.
     * @deny (create, get, list, update, delete) User cannot create, get, list, update, or delete meal logs for other users.
     * @principle Enforces document ownership for all operations on meal logs.
     */
    match /users/{userId}/meals/{mealId} {
      //Function to check if the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      // Function to check if the requested user id is same as authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Function to check if the user is the owner and document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to activity log documents within a user's profile.
     * @path /users/{userId}/activityLogs/{activityLogId}
     * @allow (create) Authenticated user can create an activity log under their profile.
     * @allow (get, list, update, delete) Authenticated user can get, list, update, or delete their own activity logs.
     * @deny (create, get, list, update, delete) User cannot create, get, list, update, or delete activity logs for other users.
     * @principle Enforces document ownership for all operations on activity logs.
     */
    match /users/{userId}/activityLogs/{activityLogId} {
      //Function to check if the user is signed in
      function isSignedIn() {
          return request.auth != null;
      }

      // Function to check if the requested user id is same as authenticated user id
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Function to check if the user is the owner and document exists
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}