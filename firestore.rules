/**
 * @fileoverview Firestore Security Rules for OyeBhukkaD Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which corresponds to the Firebase
 * Auth UID.  This includes user profiles, meal logs, activity logs, and planned meals.
 *
 * Key Security Decisions:
 * - User data is private by default; no public listing of users is allowed.
 * - Only authenticated users can access data. Anonymous users are supported.
 *
 * Denormalization for Authorization:
 * The 'userId' field is denormalized into the Meal and ActivityLog documents. This
 * simplifies the security rules by avoiding the need for expensive `get()` calls to
 * verify ownership.  It enables fast, path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @principle Relies on request.auth.uid to determine the identity of the user making the request.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the existing resource.
     * @principle Combines ownership check with the existence check to prevent accidental omissions.
     */
    function isExistingOwner(userId) {
      return request.auth != null && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @principle All authorization decisions must rely on `request.auth` as the source of truth.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching userId in the document.
     * @allow (get, update, delete) Authenticated user accessing their own profile.
     * @deny (create) Authenticated user with non-matching userId in the document.
     * @deny (list) Any user attempting to list all user profiles.
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for meal logs under a user's profile.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create, get, update, delete, list) Authenticated user accessing their own meal logs.
     * @deny (create, get, update, delete, list) Any other user attempting to access meal logs.
     * @principle Enforces path-based ownership, preventing unauthorized access to meal logs.
     */
    match /users/{userId}/meals/{mealId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for activity logs under a user's profile.
     * @path /users/{userId}/activityLogs/{activityLogId}
     * @allow (create, get, update, delete, list) Authenticated user accessing their own activity logs.
     * @deny (create, get, update, delete, list) Any other user attempting to access activity logs.
     * @principle Enforces path-based ownership, preventing unauthorized access to activity logs.
     */
    match /users/{userId}/activityLogs/{activityLogId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for planned meals under a user's profile.
     * @path /users/{userId}/plannedMeals/{plannedMealId}
     * @allow (create, get, update, delete, list) Authenticated user accessing their own planned meals.
     * @deny (create, get, update, delete, list) Any other user attempting to access planned meals.
     */
    match /users/{userId}/plannedMeals/{plannedMealId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
	    allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}