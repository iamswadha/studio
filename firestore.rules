/**
 * @fileoverview Firestore Security Rules for OyeBhukkaD application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data, stored under their unique user ID.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/meals/{mealId}: Stores individual meal entries for a user.
 * - /users/{userId}/activityLogs/{activityLogId}: Stores activity logs for a user.
 *
 * Key Security Decisions:
 * - User data is strictly segregated by user ID.
 * - Users can only create, read, update, and delete their own data.
 * - Listing all users is not permitted for privacy reasons.
 *
 * Denormalization for Authorization:
 * - The `Meal` and `ActivityLog` entities include a `userId` field, which duplicates the ID from the document path. This duplication enables the rules to authorize a request by comparing the `request.auth.uid` to the `userId` in the document, without needing to perform a `get()` operation. This simplifies the rules and improves performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid matches userId).
     * @allow (get, update, delete) - If the user is the owner of the profile.
     * @deny (create) - If the user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow the user to create their own profile. Validate that the user ID in the
      // document matches the authenticated user ID.
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Allow the user to get, update, and delete their own profile.
      // Enforce that the user is the owner of the profile. Also, enforce immutability of the 'id' field on updates.
      allow get, update, delete: if isOwner(userId) && resource.data.id == userId;

      // Prevent listing all user profiles for privacy.
      allow list: if false;
    }

    /**
     * @description Controls access to meal log entries under a user's profile.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) - If the user is creating a meal entry for themselves.
     * @allow (get, list, update, delete) - If the user is the owner of the meal entry.
     * @deny (create) - If the user attempts to create a meal entry for another user.
     * @deny (get, list, update, delete) - If the user is not the owner of the meal entry.
     * @principle Enforces document ownership for meal entries.
     */
    match /users/{userId}/meals/{mealId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create a meal entry for themselves.
      // Validate that the user ID in the document matches the authenticated user ID.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get, list, update, and delete their own meal entries.
      // Enforce that the user is the owner of the meal entry. Also, enforce immutability of the 'userId' field on updates.
      allow get, list, update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to activity log entries under a user's profile.
     * @path /users/{userId}/activityLogs/{activityLogId}
     * @allow (create) - If the user is creating an activity log entry for themselves.
     * @allow (get, list, update, delete) - If the user is the owner of the activity log entry.
     * @deny (create) - If the user attempts to create an activity log entry for another user.
     * @deny (get, list, update, delete) - If the user is not the owner of the activity log entry.
     * @principle Enforces document ownership for activity log entries.
     */
    match /users/{userId}/activityLogs/{activityLogId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow the user to create an activity log entry for themselves.
      // Validate that the user ID in the document matches the authenticated user ID.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Allow the user to get, list, update, and delete their own activity log entries.
      // Enforce that the user is the owner of the activity log entry. Also, enforce immutability of the 'userId' field on updates.
      allow get, list, update, delete: if isExistingOwner(userId) && resource.data.userId == userId;
    }
  }
}