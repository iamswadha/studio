/**
 * @fileoverview Firestore Security Rules for OyeBhukkaD Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user has a dedicated
 * data tree under `/users/{userId}` where they can store their profile, meals,
 * activity logs, and planned meals. No data is publicly accessible without authentication.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information. The `userId` corresponds to the
 *   Firebase Auth UID.
 * - `/users/{userId}/meals/{mealId}`: Stores individual meal logs for a user.
 * - `/users/{userId}/activityLogs/{activityLogId}`: Stores activity logs for a user.
 * - `/users/{userId}/plannedMeals/{plannedMealId}`: Stores planned meals for a user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Only authenticated users can access data.
 * - Each user can only access data under their own `userId` path.
 *
 * Denormalization for Authorization:
 * The `meals`, `activityLogs`, and `plannedMeals` subcollections include the `userId` in
 * each document. This denormalization is critical for efficient and secure querying
 * and avoids the need for complex `get()` calls in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile.
     * @deny (create) - If the `userId` does not match `auth.uid`.
     * @deny (list) - Listing all users is not permitted.
     * @deny (update,delete) - If the document does not exist
     * @principle Enforces document ownership; users can only manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for meal logs under a user's profile.
     * @path /users/{userId}/meals/{mealId}
     * @allow (create) - Authenticated user can create meal logs under their own profile.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own meal logs.
     * @deny (create) - If the `userId` does not match `auth.uid`.
     * @deny (update,delete) - If the document does not exist
     * @principle Enforces document ownership; users can only manage their own meal logs.
     */
    match /users/{userId}/meals/{mealId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for activity logs under a user's profile.
     * @path /users/{userId}/activityLogs/{activityLogId}
     * @allow (create) - Authenticated user can create activity logs under their own profile.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own activity logs.
     * @deny (create) - If the `userId` does not match `auth.uid`.
     * @deny (update,delete) - If the document does not exist
     * @principle Enforces document ownership; users can only manage their own activity logs.
     */
    match /users/{userId}/activityLogs/{activityLogId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for planned meals under a user's profile.
     * @path /users/{userId}/plannedMeals/{plannedMealId}
     * @allow (create) - Authenticated user can create planned meals under their own profile.
     * @allow (get, list, update, delete) - Authenticated user can access/modify their own planned meals.
     * @deny (create) - If the `userId` does not match `auth.uid`.
     * @deny (update,delete) - If the document does not exist
     * @principle Enforces document ownership; users can only manage their own planned meals.
     */
    match /users/{userId}/plannedMeals/{plannedMealId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}